{
  "name": "Gopal",
  "tagline": "Easy to use Golang Exec Library",
  "body": "<img align=\"right\" width=\"400\" alt=\"Gopal logo\" src=\"https://cloud.githubusercontent.com/assets/982868/14644612/d777600e-067c-11e6-997e-090e1bd6c49e.png\">\r\n\r\n# Gopal\r\n\r\nEasy to use Golang Exec Library\r\n\r\n> Stable version: v1.0.0\r\n\r\n## Introduction\r\n\r\nGopal is simple library to allow developer exec-ing golang source codes.\r\n\r\nTechnically Golang doesn't provide API to do some exec, so we use temporary file to achieve that.\r\n\r\n[![Build Status](https://travis-ci.org/novalagung/gopal.png?branch=master)](https://travis-ci.org/novalagung/gopal)\r\n\r\n## Installation\r\n\r\nJust go get the lib is enough\r\n\r\n```bash\r\ngo get -u github.com/novalagung/gopal\r\n```\r\n\r\nRun test\r\n\r\n```bash\r\ncd $GOPATH/src/github.com/novalagung/gopal\r\ngo test *.go -v\r\n```\r\n\r\n## Example\r\n\r\n#### Simple Example\r\n\r\n```go\r\npackage main\r\n\r\nimport \"github.com/novalagung/gopal\"\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\tcmdString := `3 + 2`\r\n\toutput, err := gopal.New().ExecuteSimple(cmdString)\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t}\r\n\tfmt.Println(\"result\", \"=>\", output)\r\n}\r\n```\r\n\r\n#### Another Example\r\n\r\n```go\r\ncmdString := `\r\n\tnumber := 3\r\n\tif number == 2 {\r\n\t\tfmt.Println(\"wrong\")\r\n\t} else {\r\n\t\tfmt.Println(\"right\")\r\n\t}\r\n`\r\n\r\noutput, err := gopal.New().ExecuteSimple(cmdString)\r\nif err != nil {\r\n\tfmt.Println(err)\r\n}\r\nfmt.Println(\"result\", \"=>\", output)\r\n```\r\n\r\n#### Example which use `strings` and `runtime`\r\n\r\n```go\r\ncmdString := `\r\n\tosName := runtime.GOOS\r\n\tarr := []string{\"my\", \"operation system\", \"is\", osName}\r\n\treturn strings.Join(arr, \", \")\r\n`\r\n\r\noutput, err := gopal.New().AddLibs(\"strings\", \"runtime\").ExecuteSimple(cmdString)\r\nif err != nil {\r\n\tfmt.Println(err)\r\n}\r\nfmt.Println(\"result\", \"=>\", output)\r\n```\r\n\r\n#### Example Not Simple (again, NOT SIMPLE, by using `Execute()` func)\r\n\r\n```go\r\ncmdString := `\r\n\tfunc calculate(values ...int) int {\r\n\t\ttotal := 0\r\n\t\tfor _, each := range values {\r\n\t\t\ttotal = total + each\r\n\t\t}\r\n\t\treturn total\r\n\t}\r\n\r\n\tfunc main() {\r\n\t\tres := calculate(1, 2, 3, 4, 2, 3, 1)\r\n\t\tfmt.Printf(\"total : %d\", res)\r\n\t}\r\n`\r\n\r\noutput, err := gopal.New().Execute(cmdString)\r\nif err != nil {\r\n\tfmt.Println(err)\r\n}\r\nfmt.Println(\"result\", \"=>\", output)\r\n```\r\n\r\n#### Example Execute Raw (use `ExecuteRaw()` func)\r\n\r\n```go\r\ncmdString := `\r\n\tpackage main\r\n\r\n\timport \"fmt\"\r\n\r\n\tfunc main() {\r\n\t\tfmt.Print(\"hello\")\r\n\t}\r\n`\r\n\r\noutput, err := gopal.New().ExecuteRaw(cmdString)\r\nif err != nil {\r\n\tfmt.Println(err)\r\n}\r\nfmt.Println(\"result\", \"=>\", output)\r\n```\r\n\r\n#### More Example\r\n\r\nFor more examples please take a look at the [`gopal_test.go` file](https://github.com/novalagung/gopal/blob/master/gopal_test.go).\r\n\r\n## API Reference\r\n\r\n#### Func of `gopal`\r\n\r\nThere are only one func available, `gopal.New()` which return object that type is `*gopal.Gopal`\r\n\r\n| Func        | Usage          |\r\n| ----------- | :------------- |\r\n| gopal.New() | instantiate new `*gopal.Gopal` object |\r\n\r\n#### Property of `*gopal.Gopal`\r\n\r\n| Property    | Type | Usage          |\r\n| ----------- | ---- | :------------- |\r\n| .WillDeleteTemporaryFile | `bool` | Determine if temporary path will be deleted or not after executing the source codes (default is `true`) |\r\n| .TemporaryFolderName | `string` | Name of temporary folder used to store all `*.go` temp files (default is `.temp` for *\\*nix* / \\*d*rwin*, and `temp` for *w\\*ndows*) | Run golang source codes. The code will be placed inside virtual `main()` func |\r\n\r\n#### Methods of `*gopal.Gopal`\r\n\r\n| Method      | Usage          |\r\n| ----------- | :------------- |\r\n| .AddLibs(libs ...string) | Add other libraries, by default only `fmt` is included |\r\n| .ExecuteSimple(cmdString&nbsp;string) | Run golang source codes. The code will be placed inside virtual `main()` func |\r\n| .Execute(cmdString string) | Run golang source codes which contains `main()` func |\r\n| .ExecuteRaw(cmdString string) | Run complete golang source code |\r\n| .DeleteTemporaryPath() | Force delete temporary path which used to do the exec process |\r\n\r\n\r\n## Contribution\r\n\r\nFeel free to contribute\r\n\r\n`fork` -> `commit` -> `push` -> `pull request`\r\n\r\n## License\r\n\r\nMIT License\r\n\r\n## Author\r\n\r\nNoval Agung Prayogo - [http://novalagung.com/](http://novalagung.com)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}