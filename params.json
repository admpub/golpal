{
  "name": "Golpal",
  "tagline": "Easy to use Golang Eval Library",
  "body": "<img align=\"right\" alt=\"Golpal logo\" src=\"https://raw.githubusercontent.com/novalagung/golpal/master/logo.png\">\r\n\r\n# Golpal\r\n\r\nEasy to use Golang Eval Library\r\n\r\n## Introduction\r\n\r\nGolpal is simple library to allow developer to do **eval** operation on golang source codes. Technically Golang doesn't provide API to do some eval, so we use temporary file to achieve that.\r\n\r\n[![Build Status](https://travis-ci.org/novalagung/golpal.png?branch=master)](https://travis-ci.org/novalagung/golpal)\r\n\r\n## Table of contents\r\n\r\n - <a href=\"#user-content-installation\")>Installation</a>\r\n - <a href=\"#user-content-cli-installation\")>CLI Installation</a>\r\n - <a href=\"#user-content-example\")>Example</a>\r\n - <a href=\"#user-content-api-reference\")>API Reference</a>\r\n - <a href=\"#user-content-contributing\")>Contributing</a>\r\n - <a href=\"#user-content-license\")>License</a>\r\n - <a href=\"#user-content-author\")>Author</a>\r\n\r\n\r\n<h2 id=\"installation\">Installation</h2>\r\n\r\n> Stable version: v1.0.0\r\n\r\nJust go get the lib is enough\r\n\r\n```bash\r\ngo get -u github.com/novalagung/golpal\r\n```\r\n\r\nRun test\r\n\r\n```bash\r\ncd $GOPATH/src/github.com/novalagung/golpal\r\ngo test *.go -v\r\n```\r\n\r\n\r\n<h2 id=\"cli-installation\">CLI Installation</h2>\r\n\r\nBy using cli, golpal will run faster. Follow these instructions to install golpal CLI.\r\n\r\n#### Linux\r\n\r\n```bash\r\nsh install_cli.sh\r\ngolpal -content \"3 + 4\"\r\n```\r\n\r\n#### Windows\r\n\r\n```bash\r\ninstall_cli.bat\r\ngolpal.exe -content \"3 + 4\"\r\n```\r\n\r\n\r\n<h2 id=\"example\">Example</h2>\r\n\r\n#### Simple Example\r\n\r\n```go\r\npackage main\r\n\r\nimport \"github.com/novalagung/golpal\"\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\tcmdString := `3 + 2`\r\n\toutput, err := golpal.New().ExecuteSimple(cmdString)\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t}\r\n\tfmt.Println(\"result\", \"=>\", output)\r\n}\r\n```\r\n\r\n> For one line statement using `ExecuteSimple()`, `return` keyword is optional\r\n\r\n#### Another Example\r\n\r\n```go\r\ncmdString := `\r\n\tnumber := 3\r\n\tif number == 2 {\r\n\t\treturn \"wrong\"\r\n\t} else {\r\n\t\treturn \"right\"\r\n\t}\r\n`\r\n\r\noutput, err := golpal.New().ExecuteSimple(cmdString)\r\nif err != nil {\r\n\tfmt.Println(err)\r\n}\r\nfmt.Println(\"result\", \"=>\", output)\r\n```\r\n\r\n> For multiline statement using `ExecuteSimple()`, `return` must be defined\r\n\r\n#### Example which use `strings` and `runtime`\r\n\r\n```go\r\ncmdString := `\r\n\tosName := runtime.GOOS\r\n\tarr := []string{\"my\", \"operation system\", \"is\", osName}\r\n\treturn strings.Join(arr, \", \")\r\n`\r\n\r\noutput, err := golpal.New().AddLibs(\"strings\", \"runtime\").ExecuteSimple(cmdString)\r\nif err != nil {\r\n\tfmt.Println(err)\r\n}\r\nfmt.Println(\"result\", \"=>\", output)\r\n```\r\n\r\n#### Example Not Simple (again, NOT SIMPLE, by using `Execute()` func)\r\n\r\n```go\r\ncmdString := `\r\n\tfunc calculate(values ...int) int {\r\n\t\ttotal := 0\r\n\t\tfor _, each := range values {\r\n\t\t\ttotal = total + each\r\n\t\t}\r\n\t\treturn total\r\n\t}\r\n\r\n\tfunc main() {\r\n\t\tres := calculate(1, 2, 3, 4, 2, 3, 1)\r\n\t\tfmt.Printf(\"total : %d\", res)\r\n\t}\r\n`\r\n\r\noutput, err := golpal.New().Execute(cmdString)\r\nif err != nil {\r\n\tfmt.Println(err)\r\n}\r\nfmt.Println(\"result\", \"=>\", output)\r\n```\r\n\r\n#### Example Execute Raw (use `ExecuteRaw()` func)\r\n\r\n```go\r\ncmdString := `\r\n\tpackage main\r\n\r\n\timport \"fmt\"\r\n\r\n\tfunc main() {\r\n\t\tfmt.Print(\"hello\")\r\n\t}\r\n`\r\n\r\noutput, err := golpal.New().ExecuteRaw(cmdString)\r\nif err != nil {\r\n\tfmt.Println(err)\r\n}\r\nfmt.Println(\"result\", \"=>\", output)\r\n```\r\n\r\n#### CLI Example\r\n\r\n```go\r\nfunc prepareCmd(cmdString string, args ...string) (*exec.Cmd, *bytes.Buffer, *bytes.Buffer) {\r\n\tvar stdout bytes.Buffer\r\n\tvar stderr bytes.Buffer\r\n\r\n\tif runtime.GOOS == \"windows\" {\r\n\t\tcmdString = fmt.Sprintf(\".exe\", cmdString)\r\n\t}\r\n\r\n\tcmd := exec.Command(cmdString, args...)\r\n\tcmd.Stdout = &stdout\r\n\tcmd.Stderr = &stderr\r\n\r\n\treturn cmd, &stdout, &stderr\r\n}\r\n\r\nfunc main() {\r\n\tcmd, stdout, stderr := prepareCmd(\"golpal\", \"-content\", \"3 + 1\")\r\n\tif err := cmd.Run(); err != nil {\r\n\t\tfmt.Println(err.Error())\r\n\t\treturn\r\n\t}\r\n\r\n\tif stderr.Len() > 0 {\r\n\t\tfmt.Println(stderr.String())\r\n\t\treturn\r\n\t}\r\n\r\n\tfmt.Println(\"result\", \"=>\", strings.TrimSpace(stdout.String()))\r\n}\r\n```\r\n\r\n#### More Example\r\n\r\nFor more examples please take a look at the [`golpal_test.go`](https://github.com/novalagung/golpal/blob/master/golpal_test.go) and  [`cli_test.go`](https://github.com/novalagung/golpal/blob/master/cli_test.go).\r\n\r\n\r\n<h2 id=\"api-reference\">API Reference</h2>\r\n\r\n#### Func of `golpal`\r\n\r\nThere are only one func available, `golpal.New()` which return object that type is `*golpal.Golpal`\r\n\r\n| Func        | Usage          |\r\n| ----------- | :------------- |\r\n| golpal.New() | instantiate new `*golpal.Golpal` object |\r\n\r\n#### Properties of `*golpal.Golpal`\r\n\r\n| Property    | Type | Usage          |\r\n| ----------- | ---- | :------------- |\r\n| .WillDeleteTemporaryFile | `bool` | Determine if temporary path will be deleted or not after executing the source codes (default is `true`) |\r\n| .TemporaryFolderName | `string` | Name of temporary folder used to store all `*.go` temp files (default is `.temp` for *\\*nix* / \\*d*rwin*, and `temp` for *w\\*ndows*) | Run golang source codes. The code will be placed inside virtual `main()` func |\r\n\r\n#### Methods of `*golpal.Golpal`\r\n\r\n| Method      | Usage          |\r\n| ----------- | :------------- |\r\n| .AddLibs(libs ...string) | Add other libraries, by default only `fmt` is included |\r\n| .ExecuteSimple(cmdString&nbsp;string) | Run golang source codes. The code will be placed inside virtual `main()` func. This function doesn't allow `fmt.Print*()`. Also for multiline statement, `return` must be defined |\r\n| .Execute(cmdString string) | Run golang source codes which contains `main()` func |\r\n| .ExecuteRaw(cmdString string) | Run complete golang source code |\r\n| .DeleteTemporaryPath() | Force delete temporary path which used to do the exec process |\r\n\r\n\r\n<h2 id=\"cli-commands\">CLI Commands</h2>\r\n\r\nGolpal CLI (`golpal` / `golpal.exe`) has several arguments\r\n\r\n| Args      | Usage          | Example |\r\n| --------- | :------------- | :------ |\r\n| -content | Eval from string | `-content=\"3 + 4\"`\r\n| -file | Eval from file | `-file=\"/path/to/file\"`\r\n| -mode | Golpal mode (`simple`, `normal`, `raw`). Default is `simple` | `-mode=\"raw\"`\r\n| -libs | Include libs | `-libs=\"io/ioutil, bytes, strings\"`\r\n\r\n\r\n\r\n<h2 id=\"contributing\">Contributing</h2>\r\n\r\nFeel free to contribute\r\n\r\n`fork` -> `commit` -> `push` -> `pull request`\r\n\r\n\r\n<h2 id=\"license\">License</h2>\r\n\r\nMIT License\r\n\r\n\r\n<h2 id=\"author\">Author</h2>\r\n\r\nNoval Agung Prayogo - [http://novalagung.com/](http://novalagung.com)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}